// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using podcache.Data.Context;

namespace podcache.Data.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("podcache.Data.Domain.ArchiveAlbum", b =>
                {
                    b.Property<int>("ArchiveAlbumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentCreatorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("MonthNumber")
                        .HasColumnType("int");

                    b.Property<int>("YearNumber")
                        .HasColumnType("int");

                    b.HasKey("ArchiveAlbumID");

                    b.HasIndex("ContentCreatorID");

                    b.ToTable("ArchiveAlbums");
                });

            modelBuilder.Entity("podcache.Data.Domain.ArchiveFile", b =>
                {
                    b.Property<int>("ArchiveFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ApproximateBytes")
                        .HasColumnType("float");

                    b.Property<int?>("ArchiveAlbumID")
                        .HasColumnType("int");

                    b.Property<int?>("ArchiveFileTypeInfoID")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FilePathUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShowID")
                        .HasColumnType("int");

                    b.Property<int?>("ShowRundownID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ArchiveFileID");

                    b.HasIndex("ArchiveAlbumID");

                    b.HasIndex("ArchiveFileTypeInfoID");

                    b.HasIndex("ShowID");

                    b.HasIndex("ShowRundownID");

                    b.ToTable("ArchiveFiles");
                });

            modelBuilder.Entity("podcache.Data.Domain.ArchiveFileTypeInfo", b =>
                {
                    b.Property<int>("ArchiveFileTypeInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ArchiveFileTypeInfoID");

                    b.ToTable("ArchiveFileTypeInfos");
                });

            modelBuilder.Entity("podcache.Data.Domain.AudibleMediaItem", b =>
                {
                    b.Property<int>("AudibleMediaItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("By")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FullShowMetadataUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ItemTypeClassification")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NarratedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PlaybackLength")
                        .HasColumnType("time");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("AudibleMediaItemID");

                    b.ToTable("AudibleMediaItems");
                });

            modelBuilder.Entity("podcache.Data.Domain.ContentCreator", b =>
                {
                    b.Property<int>("ContentCreatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentCreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ContentCreatorID");

                    b.ToTable("ContentCreators");
                });

            modelBuilder.Entity("podcache.Data.Domain.EmbeddedContentSource", b =>
                {
                    b.Property<int>("EmbeddedContentSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmbeddedContentSourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("EmbeddedContentSourceID");

                    b.HasIndex("EmbeddedContentSourceName")
                        .IsUnique()
                        .HasName("UIX_EmbeddedContentSource_EmbeddedContentSourceName");

                    b.ToTable("EmbeddedContentSources");
                });

            modelBuilder.Entity("podcache.Data.Domain.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("GenderID");

                    b.HasIndex("GenderName")
                        .IsUnique()
                        .HasName("UIX_Gender_GenderName");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("podcache.Data.Domain.Guest", b =>
                {
                    b.Property<int>("GuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("HeadshotImagePath")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("LegacyGuestID")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TwitterHandle")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.HasKey("GuestID");

                    b.HasIndex("GenderID");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("podcache.Data.Domain.GuestAppearance", b =>
                {
                    b.Property<int>("GuestAppearanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArchiveFileID")
                        .HasColumnType("int");

                    b.Property<int?>("GuestID")
                        .HasColumnType("int");

                    b.Property<long?>("SegmentTimeEnd")
                        .HasColumnType("bigint");

                    b.Property<long?>("SegmentTimeStart")
                        .HasColumnType("bigint");

                    b.Property<int?>("ShowMediaEntryID")
                        .HasColumnType("int");

                    b.Property<int?>("ShowRundownID")
                        .HasColumnType("int");

                    b.HasKey("GuestAppearanceID");

                    b.HasIndex("ArchiveFileID");

                    b.HasIndex("GuestID");

                    b.HasIndex("ShowMediaEntryID");

                    b.HasIndex("ShowRundownID");

                    b.ToTable("GuestAppearances");
                });

            modelBuilder.Entity("podcache.Data.Domain.GuestAppearanceType", b =>
                {
                    b.Property<int>("GuestAppearanceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppearanceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("GuestAppearanceTypeID");

                    b.HasIndex("AppearanceTypeName")
                        .IsUnique()
                        .HasName("IX_GuestAppearanceType_AppearanceTypeName");

                    b.ToTable("GuestAppearanceTypes");
                });

            modelBuilder.Entity("podcache.Data.Domain.Host", b =>
                {
                    b.Property<int>("HostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("HeadshotImagePath")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterHandle")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.HasKey("HostID");

                    b.HasIndex("GenderID");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("podcache.Data.Domain.PatreonMediaPost", b =>
                {
                    b.Property<int>("PatreonMediaPostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("PatreonMediaPostID");

                    b.ToTable("PatreonMediaPosts");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShoutEngineMediaPost", b =>
                {
                    b.Property<int>("ShoutEngineMediaPostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("ShoutEngineMediaPostID");

                    b.ToTable("ShoutEngineMediaPosts");
                });

            modelBuilder.Entity("podcache.Data.Domain.Show", b =>
                {
                    b.Property<int>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("ShowID");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowHost", b =>
                {
                    b.Property<int>("ShowID")
                        .HasColumnType("int");

                    b.Property<int>("HostID")
                        .HasColumnType("int");

                    b.Property<int>("ShowHostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ShowID", "HostID");

                    b.HasIndex("HostID");

                    b.ToTable("ShowHosts");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaEntry", b =>
                {
                    b.Property<int>("ShowMediaEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmbeddedContentSourceID")
                        .HasColumnType("int");

                    b.Property<string>("EmbeddedContentSourceUrl")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("ShowID")
                        .HasColumnType("int");

                    b.Property<string>("ShowIdentifier")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ShowNumber")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<int?>("UserCreatedPlaylistID")
                        .HasColumnType("int");

                    b.HasKey("ShowMediaEntryID");

                    b.HasIndex("EmbeddedContentSourceID");

                    b.HasIndex("ShowID");

                    b.HasIndex("ShowIdentifier")
                        .IsUnique()
                        .HasName("UIX_ShowMediaEntry_ShowIdentifier")
                        .HasFilter("[ShowIdentifier] IS NOT NULL");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("UIX_ShowMediaEntry_Title");

                    b.HasIndex("UserCreatedPlaylistID");

                    b.ToTable("ShowMediaEntries");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaSegmentComment", b =>
                {
                    b.Property<int>("ShowMediaSegmentCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CommentLastEditedTimeStampUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("CommentTimeEnd")
                        .HasColumnType("time");

                    b.Property<DateTime>("CommentTimeStampUtc")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("CommentTimeStart")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("PlaybackLength")
                        .HasColumnType("time");

                    b.Property<int?>("ShowMediaEntryID")
                        .HasColumnType("int");

                    b.Property<int>("ShowMediaSegmentContentTagID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShowMediaSegmentCommentID");

                    b.HasIndex("ShowMediaEntryID");

                    b.HasIndex("ShowMediaSegmentContentTagID");

                    b.ToTable("ShowMediaSegmentComment");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaSegmentContentTag", b =>
                {
                    b.Property<int>("ShowMediaSegmentContentTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("PlaybackLength")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SegmentTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SegmentTimeStart")
                        .HasColumnType("time");

                    b.Property<int>("ShowMediaEntryID")
                        .HasColumnType("int");

                    b.HasKey("ShowMediaSegmentContentTagID");

                    b.HasIndex("ShowMediaEntryID");

                    b.ToTable("ShowMediaSegmentContentTags");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaSegmentRating", b =>
                {
                    b.Property<int>("ShowMediaSegmentRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("RatingLastEditedTimeStampUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RatingTimeStampUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float");

                    b.Property<int>("ShowMediaSegmentContentTagID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShowMediaSegmentRatingID");

                    b.HasIndex("ShowMediaSegmentContentTagID");

                    b.ToTable("ShowMediaSegmentRating");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowRundown", b =>
                {
                    b.Property<int>("ShowRundownID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ArchiveFileID")
                        .HasColumnType("int");

                    b.Property<string>("DetailsUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShowRundownAuthorID")
                        .HasColumnType("int");

                    b.Property<string>("ShowRundownContent")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ShowRundownName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("ShowRundownID");

                    b.HasIndex("ArchiveFileID");

                    b.HasIndex("ShowRundownAuthorID");

                    b.ToTable("ShowRundowns");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowRundownAuthor", b =>
                {
                    b.Property<int>("ShowRundownAuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("ShowRundownAuthorID");

                    b.HasIndex("AuthorName")
                        .HasName("IX_ShowRundownAuthor_AuthorName");

                    b.ToTable("ShowRundownAuthors");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowRundownCsvEntry", b =>
                {
                    b.Property<int>("ShowRundownCsvEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("LongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShowRundownCsvEntryID");

                    b.ToTable("ShowRundownCsvEntries");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowRundownTag", b =>
                {
                    b.Property<int>("ShowRundownTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShowRundownTagKind")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ShowRundownTagID");

                    b.HasIndex("ShowRundownTagKind")
                        .IsUnique()
                        .HasName("UIX_ShowRundownTag_ShowRundownTagKind");

                    b.ToTable("ShowRundownTags");
                });

            modelBuilder.Entity("podcache.Data.Domain.UserCreatedPlaylist", b =>
                {
                    b.Property<int>("UserCreatedPlaylistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsers.UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCreatedPlaylistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserCreatedPlaylistID");

                    b.HasIndex("AspNetUsers.UserName");

                    b.ToTable("UserCreatedPlaylists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("podcache.Data.Domain.ArchiveAlbum", b =>
                {
                    b.HasOne("podcache.Data.Domain.ContentCreator", "ContentCreator")
                        .WithMany()
                        .HasForeignKey("ContentCreatorID");
                });

            modelBuilder.Entity("podcache.Data.Domain.ArchiveFile", b =>
                {
                    b.HasOne("podcache.Data.Domain.ArchiveAlbum", "ArchiveAlbum")
                        .WithMany("ArchiveFiles")
                        .HasForeignKey("ArchiveAlbumID");

                    b.HasOne("podcache.Data.Domain.ArchiveFileTypeInfo", "ArchiveFileTypeInfo")
                        .WithMany()
                        .HasForeignKey("ArchiveFileTypeInfoID");

                    b.HasOne("podcache.Data.Domain.Show", "Show")
                        .WithMany()
                        .HasForeignKey("ShowID");

                    b.HasOne("podcache.Data.Domain.ShowRundown", "ShowRundown")
                        .WithMany()
                        .HasForeignKey("ShowRundownID");
                });

            modelBuilder.Entity("podcache.Data.Domain.Guest", b =>
                {
                    b.HasOne("podcache.Data.Domain.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");
                });

            modelBuilder.Entity("podcache.Data.Domain.GuestAppearance", b =>
                {
                    b.HasOne("podcache.Data.Domain.ArchiveFile", null)
                        .WithMany("GuestAppearances")
                        .HasForeignKey("ArchiveFileID");

                    b.HasOne("podcache.Data.Domain.Guest", "Guest")
                        .WithMany("ShowAppearances")
                        .HasForeignKey("GuestID");

                    b.HasOne("podcache.Data.Domain.ShowMediaEntry", "ShowMediaEntry")
                        .WithMany("GuestAppearances")
                        .HasForeignKey("ShowMediaEntryID");

                    b.HasOne("podcache.Data.Domain.ShowRundown", null)
                        .WithMany("GuestAppearances")
                        .HasForeignKey("ShowRundownID");
                });

            modelBuilder.Entity("podcache.Data.Domain.Host", b =>
                {
                    b.HasOne("podcache.Data.Domain.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowHost", b =>
                {
                    b.HasOne("podcache.Data.Domain.Host", "Host")
                        .WithMany("ShowHosts")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("podcache.Data.Domain.Show", "Show")
                        .WithMany("ShowHosts")
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaEntry", b =>
                {
                    b.HasOne("podcache.Data.Domain.EmbeddedContentSource", "EmbeddedContentSource")
                        .WithMany()
                        .HasForeignKey("EmbeddedContentSourceID");

                    b.HasOne("podcache.Data.Domain.Show", "Show")
                        .WithMany()
                        .HasForeignKey("ShowID");

                    b.HasOne("podcache.Data.Domain.UserCreatedPlaylist", null)
                        .WithMany("ShowMediaEntries")
                        .HasForeignKey("UserCreatedPlaylistID");
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaSegmentComment", b =>
                {
                    b.HasOne("podcache.Data.Domain.ShowMediaEntry", null)
                        .WithMany("ShowMediaSegmentComments")
                        .HasForeignKey("ShowMediaEntryID");

                    b.HasOne("podcache.Data.Domain.ShowMediaSegmentContentTag", "ShowMediaSegmentContentTag")
                        .WithMany("MediaSegmentComments")
                        .HasForeignKey("ShowMediaSegmentContentTagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaSegmentContentTag", b =>
                {
                    b.HasOne("podcache.Data.Domain.ShowMediaEntry", "ShowMediaEntry")
                        .WithMany("ContentSegmentTags")
                        .HasForeignKey("ShowMediaEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowMediaSegmentRating", b =>
                {
                    b.HasOne("podcache.Data.Domain.ShowMediaSegmentContentTag", "ShowMediaSegmentContentTag")
                        .WithMany("ShowMediaSegmentRatings")
                        .HasForeignKey("ShowMediaSegmentContentTagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("podcache.Data.Domain.ShowRundown", b =>
                {
                    b.HasOne("podcache.Data.Domain.ArchiveFile", "ArchiveFile")
                        .WithMany()
                        .HasForeignKey("ArchiveFileID");

                    b.HasOne("podcache.Data.Domain.ShowRundownAuthor", "ShowRundownAuthor")
                        .WithMany()
                        .HasForeignKey("ShowRundownAuthorID");
                });

            modelBuilder.Entity("podcache.Data.Domain.UserCreatedPlaylist", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("AspNetUsers.UserName");
                });
#pragma warning restore 612, 618
        }
    }
}
